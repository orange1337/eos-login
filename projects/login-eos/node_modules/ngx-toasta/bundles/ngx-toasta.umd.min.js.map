{"version":3,"sources":["ng://ngx-toasta/lib/toasta.utils.ts","ng://ngx-toasta/lib/toasta.service.ts","ng://ngx-toasta/lib/toasta.component.ts","ng://ngx-toasta/lib/toast.component.ts","ng://ngx-toasta/lib/shared.ts","ng://ngx-toasta/lib/toasta.module.ts"],"names":["isFunction","obj","Injectable","ToastaEvent","type","value","this","toastaServiceFactory","config","ToastaService","Subject","eventSource","asObservable","prototype","default","options","add","info","success","wait","error","warning","toastaOptions","title","toString","msg","Error","uniqueCounter","theme","showClose","_checkConfigItem","THEMES","indexOf","toast","id","onAdd","onRemove","timeout","hasOwnProperty","emitEvent","ToastaEventType","ADD","call","clearAll","CLEAR_ALL","clear","CLEAR","property","event","next","ToastaConfig","ToastaComponent","toastaService","position","Object","defineProperty","_position","notFound","i","POSITIONS","length","ngOnInit","_this","events","subscribe","closeToast","limit","toasts","shift","push","_setTimeout","forEach","key","splice","window","setTimeout","Component","args","selector","template","Input","EventEmitter","ToastComponent","close","$event","preventDefault","closeToastEvent","Output","SafeHtmlPipe","domSanitized","transform","_i","arguments","bypassSecurityTrustHtml","Pipe","name","DomSanitizer","providers","provide","useFactory","deps","ToastaModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["\r\n/**\r\n * Check and return true if an object is type of string\r\n * @param obj Analyse has to object the string type\r\n * @return result of analysis\r\n */\r\nexport function isString(obj: any): boolean {\r\n  return typeof obj === \"string\";\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of number\r\n * @param obj Analyse has to object the boolean type\r\n * @return result of analysis\r\n */\r\nexport function isNumber(obj: any): boolean {\r\n  return typeof obj === \"number\";\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of Function\r\n * @param obj Analyse has to object the function type\r\n * @return result of analysis\r\n */\r\nexport function isFunction(obj: any): boolean {\r\n  return typeof obj === \"function\";\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { isString, isNumber, isFunction } from './toasta.utils';\r\n\r\n\r\n\r\n/**\r\n * Options to configure a new Toast\r\n */\r\n@Injectable()\r\nexport class ToastOptions {\r\n  title: string;\r\n  msg?: string;\r\n  showClose?: boolean;\r\n  theme?: string;\r\n  timeout?: number;\r\n  onAdd?: Function;\r\n  onRemove?: Function;\r\n}\r\n\r\n/**\r\n * Structrure of a created Toast\r\n */\r\n@Injectable()\r\nexport class ToastData {\r\n  id: number;\r\n  title: string;\r\n  msg: string;\r\n  showClose: boolean;\r\n  type: string;\r\n  theme: string;\r\n  timeout: number;\r\n  onAdd: Function;\r\n  onRemove: Function;\r\n  onClick: Function;\r\n}\r\n\r\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\r\n@Injectable()\r\nexport class ToastaConfig {\r\n\r\n  // Maximum number of toasties to show at once\r\n  limit: number = 5;\r\n\r\n  // Whether to show the 'X' icon to close the toast\r\n  showClose: boolean = true;\r\n\r\n  // The window position where the toast pops up\r\n  position: 'bottom-right' | 'bottom-left' | 'bottom-center' | 'bottom-fullwidth' | 'top-right' | 'top-left' | 'top-center' | 'top-fullwidth' | 'center-center' = 'bottom-right';\r\n\r\n  // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.\r\n  timeout: number = 5000;\r\n\r\n  // What theme to use\r\n  theme: 'default' | 'material' | 'bootstrap' = 'default';\r\n}\r\n\r\nexport enum ToastaEventType {\r\n  ADD,\r\n  CLEAR,\r\n  CLEAR_ALL\r\n}\r\n\r\nexport class ToastaEvent {\r\n  constructor(public type: ToastaEventType, public value?: any) { }\r\n}\r\n\r\nexport function toastaServiceFactory(config: ToastaConfig): ToastaService {\r\n  return new ToastaService(config);\r\n}\r\n\r\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\r\n@Injectable()\r\nexport class ToastaService {\r\n  // Allowed THEMES\r\n  static THEMES: Array<string> = ['default', 'material', 'bootstrap'];\r\n  // Init the counter\r\n  uniqueCounter: number = 0;\r\n  // ToastData event emitter\r\n  // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\r\n  // Clear event emitter\r\n  // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  private eventSource: Subject<ToastaEvent> = new Subject<ToastaEvent>();\r\n  public events: Observable<ToastaEvent> = this.eventSource.asObservable();\r\n\r\n  constructor(private config: ToastaConfig) { }\r\n\r\n  /**\r\n   * Get list of toats\r\n   */\r\n  // getToasts(): Observable<ToastData> {\r\n  //   return this.toastsEmitter.asObservable();\r\n  // }\r\n\r\n  // getClear(): Observable<number> {\r\n  //   return this.clearEmitter.asObservable();\r\n  // }\r\n\r\n  /**\r\n   * Create Toast of a default type\r\n   */\r\n  default(options: ToastOptions | string | number): void {\r\n    this.add(options, 'default');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of info type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  info(options: ToastOptions | string | number): void {\r\n    this.add(options, 'info');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of success type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  success(options: ToastOptions | string | number): void {\r\n    this.add(options, 'success');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of wait type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  wait(options: ToastOptions | string | number): void {\r\n    this.add(options, 'wait');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of error type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  error(options: ToastOptions | string | number): void {\r\n    this.add(options, 'error');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of warning type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  warning(options: ToastOptions | string | number): void {\r\n    this.add(options, 'warning');\r\n  }\r\n\r\n\r\n  // Add a new toast item\r\n  private add(options: ToastOptions | string | number, type: string) {\r\n    let toastaOptions: ToastOptions;\r\n\r\n    if (isString(options) && options !== '' || isNumber(options)) {\r\n      toastaOptions = <ToastOptions>{\r\n        title: options.toString()\r\n      };\r\n    } else {\r\n      toastaOptions = <ToastOptions>options;\r\n    }\r\n\r\n    if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {\r\n      throw new Error('ngx-toasta: No toast title or message specified!');\r\n    }\r\n\r\n    type = type || 'default';\r\n\r\n    // Set a unique counter for an id\r\n    this.uniqueCounter++;\r\n\r\n    // Set the local vs global config items\r\n    let showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose');\r\n\r\n    // If we have a theme set, make sure it's a valid one\r\n    let theme: string;\r\n    if (toastaOptions.theme) {\r\n      theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;\r\n    } else {\r\n      theme = this.config.theme;\r\n    }\r\n\r\n    let toast: ToastData = <ToastData>{\r\n      id: this.uniqueCounter,\r\n      title: toastaOptions.title,\r\n      msg: toastaOptions.msg,\r\n      showClose: showClose,\r\n      type: 'toasta-type-' + type,\r\n      theme: 'toasta-theme-' + theme,\r\n      onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,\r\n      onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null\r\n    };\r\n\r\n    // If there's a timeout individually or globally, set the toast to timeout\r\n    // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\r\n    toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout;\r\n\r\n    // Push up a new toast item\r\n    // this.toastsSubscriber.next(toast);\r\n    // this.toastsEmitter.next(toast);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));\r\n    // If we have a onAdd function, call it here\r\n    if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {\r\n      toastaOptions.onAdd.call(this, toast);\r\n    }\r\n  }\r\n\r\n  // Clear all toasts\r\n  clearAll() {\r\n    // this.clearEmitter.next(null);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));\r\n  }\r\n\r\n  // Clear the specific one\r\n  clear(id: number) {\r\n    // this.clearEmitter.next(id);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));\r\n  }\r\n\r\n  // Checks whether the local option is set, if not,\r\n  // checks the global config\r\n  private _checkConfigItem(config: any, options: any, property: string) {\r\n    if (options[property] === false) {\r\n      return false;\r\n    } else if (!options[property]) {\r\n      return config[property];\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private emitEvent(event: ToastaEvent) {\r\n    if (this.eventSource) {\r\n      // Push up a new event\r\n      this.eventSource.next(event);\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { isFunction } from './toasta.utils';\r\nimport { ToastaService, ToastData, ToastaConfig, ToastaEvent, ToastaEventType } from './toasta.service';\r\n\r\n/**\r\n * Toasta is container for Toast components\r\n */\r\n@Component({\r\n  selector: 'ngx-toasta',\r\n  template: `\r\n    <div id=\"toasta\" [ngClass]=\"[position]\">\r\n        <ngx-toast *ngFor=\"let toast of toasts\" [toast]=\"toast\" (closeToast)=\"closeToast(toast)\"></ngx-toast>\r\n    </div>`\r\n})\r\nexport class ToastaComponent implements OnInit {\r\n  /**\r\n   * Set of constants defines position of Toasta on the page.\r\n   */\r\n  static POSITIONS: Array<String> = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];\r\n\r\n  private _position: string = '';\r\n  // The window position where the toast pops up. Possible values:\r\n  // - bottom-right (default value from ToastConfig)\r\n  // - bottom-left\r\n  // - bottom-center\r\n  // - bottom-fullwidth\r\n  // - top-right\r\n  // - top-left\r\n  // - top-center\r\n  // - top-fullwidth\r\n  // - center-center\r\n  @Input()\r\n  set position(value: string) {\r\n    if (value) {\r\n      let notFound = true;\r\n      for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {\r\n        if (ToastaComponent.POSITIONS[i] === value) {\r\n          notFound = false;\r\n          break;\r\n        }\r\n      }\r\n      if (notFound) {\r\n        // Position was wrong - clear it here to use the one from config.\r\n        value = this.config.position;\r\n      }\r\n    } else {\r\n      value = this.config.position;\r\n    }\r\n    this._position = 'toasta-position-' + value;\r\n  }\r\n\r\n  get position(): string {\r\n    return this._position;\r\n  }\r\n\r\n  // The storage for toasts.\r\n  toasts: Array<ToastData> = [];\r\n\r\n  constructor(private config: ToastaConfig, private toastaService: ToastaService) {\r\n    // Initialise position\r\n    this.position = '';\r\n  }\r\n\r\n  /**\r\n   * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\r\n   * first time, and before any of its children have been checked. It is invoked only once when the\r\n   * directive is instantiated.\r\n   */\r\n  ngOnInit(): any {\r\n    // We listen events from our service\r\n    this.toastaService.events.subscribe((event: ToastaEvent) => {\r\n      if (event.type === ToastaEventType.ADD) {\r\n        // Add the new one\r\n        let toast: ToastData = event.value;\r\n        this.add(toast);\r\n      } else if (event.type === ToastaEventType.CLEAR) {\r\n        // Clear the one by number\r\n        let id: number = event.value;\r\n        this.clear(id);\r\n      } else if (event.type === ToastaEventType.CLEAR_ALL) {\r\n        // Lets clear all toasts\r\n        this.clearAll();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Event listener of 'closeToast' event comes from ToastaComponent.\r\n   * This method removes ToastComponent assosiated with this Toast.\r\n   */\r\n  closeToast(toast: ToastData) {\r\n    this.clear(toast.id);\r\n  }\r\n\r\n  /**\r\n   * Add new Toast\r\n   */\r\n  add(toast: ToastData) {\r\n    // If we've gone over our limit, remove the earliest\r\n    // one from the array\r\n    if (this.config.limit && this.toasts.length >= this.config.limit) {\r\n      this.toasts.shift();\r\n    }\r\n    // Add toasta to array\r\n    this.toasts.push(toast);\r\n    //\r\n    // If there's a timeout individually or globally,\r\n    // set the toast to timeout\r\n    if (+toast.timeout) {\r\n      this._setTimeout(toast);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear individual toast by id\r\n   * @param id is unique identifier of Toast\r\n   */\r\n  clear(id: number) {\r\n    if (id) {\r\n      this.toasts.forEach((value: any, key: number) => {\r\n        if (value.id === id) {\r\n          if (value.onRemove && isFunction(value.onRemove)) {\r\n            value.onRemove.call(this, value);\r\n          }\r\n          this.toasts.splice(key, 1);\r\n        }\r\n      });\r\n    } else {\r\n      throw new Error('Please provide id of Toast to close');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all toasts\r\n   */\r\n  clearAll() {\r\n    this.toasts.forEach((value: any, key: number) => {\r\n      if (value.onRemove && isFunction(value.onRemove)) {\r\n        value.onRemove.call(this, value);\r\n      }\r\n    });\r\n    this.toasts = [];\r\n  }\r\n\r\n  /**\r\n   * Custom setTimeout function for specific setTimeouts on individual toasts.\r\n   */\r\n  private _setTimeout(toast: ToastData) {\r\n    window.setTimeout(() => {\r\n      this.clear(toast.id);\r\n    }, toast.timeout);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { ToastData } from './toasta.service';\r\n\r\n/**\r\n * A Toast component shows message with title and close button.\r\n */\r\n@Component({\r\n  selector: 'ngx-toast',\r\n  template: `\r\n        <div class=\"toast\" [ngClass]=\"[toast.type, toast.theme]\">\r\n            <div *ngIf=\"toast.showClose\" class=\"close-button\" (click)=\"close($event)\"></div>\r\n            <div *ngIf=\"toast.title || toast.msg\" class=\"toast-text\">\r\n                <span *ngIf=\"toast.title\" class=\"toast-title\" [innerHTML]=\"toast.title | safeHtml\"></span>\r\n                <br *ngIf=\"toast.title && toast.msg\" />\r\n                <span *ngIf=\"toast.msg\" class=\"toast-msg\" [innerHtml]=\"toast.msg | safeHtml\"></span>\r\n            </div>\r\n        </div>`\r\n})\r\nexport class ToastComponent {\r\n\r\n  @Input() toast: ToastData;\r\n  @Output('closeToast') closeToastEvent = new EventEmitter();\r\n\r\n  /**\r\n   * Event handler invokes when user clicks on close button.\r\n   * This method emit new event into ToastaContainer to close it.\r\n   */\r\n  close($event: any) {\r\n    $event.preventDefault();\r\n    this.closeToastEvent.next(this.toast);\r\n  }\r\n}\r\n","import { DomSanitizer } from '@angular/platform-browser';\r\nimport { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  constructor(private domSanitized: DomSanitizer) { }\r\n\r\n  transform(value: any, ...args: any[]): any {\r\n    return this.domSanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { ToastaComponent } from './toasta.component';\r\nimport { ToastComponent } from './toast.component';\r\nimport { SafeHtmlPipe } from './shared';\r\nimport { ToastaService, ToastaConfig, toastaServiceFactory } from './toasta.service';\r\n\r\nexport let providers = [\r\n  ToastaConfig,\r\n  { provide: ToastaService, useFactory: toastaServiceFactory, deps: [ToastaConfig] }\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastComponent, ToastaComponent, SafeHtmlPipe],\r\n  exports: [ToastComponent, ToastaComponent],\r\n  providers: providers\r\n})\r\nexport class ToastaModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ToastaModule,\r\n      providers: providers\r\n    };\r\n  }\r\n}\r\n"]}
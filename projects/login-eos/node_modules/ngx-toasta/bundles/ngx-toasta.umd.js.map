{"version":3,"file":"ngx-toasta.umd.js.map","sources":["ng://ngx-toasta/lib/toasta.utils.ts","ng://ngx-toasta/lib/toasta.service.ts","ng://ngx-toasta/lib/toasta.component.ts","ng://ngx-toasta/lib/toast.component.ts","ng://ngx-toasta/lib/shared.ts","ng://ngx-toasta/lib/toasta.module.ts"],"sourcesContent":["\r\n/**\r\n * Check and return true if an object is type of string\r\n * @param obj Analyse has to object the string type\r\n * @return result of analysis\r\n */\r\nexport function isString(obj: any): boolean {\r\n  return typeof obj === \"string\";\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of number\r\n * @param obj Analyse has to object the boolean type\r\n * @return result of analysis\r\n */\r\nexport function isNumber(obj: any): boolean {\r\n  return typeof obj === \"number\";\r\n}\r\n\r\n/**\r\n * Check and return true if an object is type of Function\r\n * @param obj Analyse has to object the function type\r\n * @return result of analysis\r\n */\r\nexport function isFunction(obj: any): boolean {\r\n  return typeof obj === \"function\";\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { isString, isNumber, isFunction } from './toasta.utils';\r\n\r\n\r\n\r\n/**\r\n * Options to configure a new Toast\r\n */\r\n@Injectable()\r\nexport class ToastOptions {\r\n  title: string;\r\n  msg?: string;\r\n  showClose?: boolean;\r\n  theme?: string;\r\n  timeout?: number;\r\n  onAdd?: Function;\r\n  onRemove?: Function;\r\n}\r\n\r\n/**\r\n * Structrure of a created Toast\r\n */\r\n@Injectable()\r\nexport class ToastData {\r\n  id: number;\r\n  title: string;\r\n  msg: string;\r\n  showClose: boolean;\r\n  type: string;\r\n  theme: string;\r\n  timeout: number;\r\n  onAdd: Function;\r\n  onRemove: Function;\r\n  onClick: Function;\r\n}\r\n\r\n/**\r\n * Default configuration for all toasts and toasta container\r\n */\r\n@Injectable()\r\nexport class ToastaConfig {\r\n\r\n  // Maximum number of toasties to show at once\r\n  limit: number = 5;\r\n\r\n  // Whether to show the 'X' icon to close the toast\r\n  showClose: boolean = true;\r\n\r\n  // The window position where the toast pops up\r\n  position: 'bottom-right' | 'bottom-left' | 'bottom-center' | 'bottom-fullwidth' | 'top-right' | 'top-left' | 'top-center' | 'top-fullwidth' | 'center-center' = 'bottom-right';\r\n\r\n  // How long (in miliseconds) the toasta shows before it's removed. Set to null/0 to turn off.\r\n  timeout: number = 5000;\r\n\r\n  // What theme to use\r\n  theme: 'default' | 'material' | 'bootstrap' = 'default';\r\n}\r\n\r\nexport enum ToastaEventType {\r\n  ADD,\r\n  CLEAR,\r\n  CLEAR_ALL\r\n}\r\n\r\nexport class ToastaEvent {\r\n  constructor(public type: ToastaEventType, public value?: any) { }\r\n}\r\n\r\nexport function toastaServiceFactory(config: ToastaConfig): ToastaService {\r\n  return new ToastaService(config);\r\n}\r\n\r\n/**\r\n * Toasta service helps create different kinds of Toasts\r\n */\r\n@Injectable()\r\nexport class ToastaService {\r\n  // Allowed THEMES\r\n  static THEMES: Array<string> = ['default', 'material', 'bootstrap'];\r\n  // Init the counter\r\n  uniqueCounter: number = 0;\r\n  // ToastData event emitter\r\n  // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\r\n  // Clear event emitter\r\n  // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  private eventSource: Subject<ToastaEvent> = new Subject<ToastaEvent>();\r\n  public events: Observable<ToastaEvent> = this.eventSource.asObservable();\r\n\r\n  constructor(private config: ToastaConfig) { }\r\n\r\n  /**\r\n   * Get list of toats\r\n   */\r\n  // getToasts(): Observable<ToastData> {\r\n  //   return this.toastsEmitter.asObservable();\r\n  // }\r\n\r\n  // getClear(): Observable<number> {\r\n  //   return this.clearEmitter.asObservable();\r\n  // }\r\n\r\n  /**\r\n   * Create Toast of a default type\r\n   */\r\n  default(options: ToastOptions | string | number): void {\r\n    this.add(options, 'default');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of info type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  info(options: ToastOptions | string | number): void {\r\n    this.add(options, 'info');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of success type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  success(options: ToastOptions | string | number): void {\r\n    this.add(options, 'success');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of wait type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  wait(options: ToastOptions | string | number): void {\r\n    this.add(options, 'wait');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of error type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  error(options: ToastOptions | string | number): void {\r\n    this.add(options, 'error');\r\n  }\r\n\r\n  /**\r\n   * Create Toast of warning type\r\n   * @param options Individual toasta config overrides\r\n   */\r\n  warning(options: ToastOptions | string | number): void {\r\n    this.add(options, 'warning');\r\n  }\r\n\r\n\r\n  // Add a new toast item\r\n  private add(options: ToastOptions | string | number, type: string) {\r\n    let toastaOptions: ToastOptions;\r\n\r\n    if (isString(options) && options !== '' || isNumber(options)) {\r\n      toastaOptions = <ToastOptions>{\r\n        title: options.toString()\r\n      };\r\n    } else {\r\n      toastaOptions = <ToastOptions>options;\r\n    }\r\n\r\n    if (!toastaOptions || !toastaOptions.title && !toastaOptions.msg) {\r\n      throw new Error('ngx-toasta: No toast title or message specified!');\r\n    }\r\n\r\n    type = type || 'default';\r\n\r\n    // Set a unique counter for an id\r\n    this.uniqueCounter++;\r\n\r\n    // Set the local vs global config items\r\n    let showClose = this._checkConfigItem(this.config, toastaOptions, 'showClose');\r\n\r\n    // If we have a theme set, make sure it's a valid one\r\n    let theme: string;\r\n    if (toastaOptions.theme) {\r\n      theme = ToastaService.THEMES.indexOf(toastaOptions.theme) > -1 ? toastaOptions.theme : this.config.theme;\r\n    } else {\r\n      theme = this.config.theme;\r\n    }\r\n\r\n    let toast: ToastData = <ToastData>{\r\n      id: this.uniqueCounter,\r\n      title: toastaOptions.title,\r\n      msg: toastaOptions.msg,\r\n      showClose: showClose,\r\n      type: 'toasta-type-' + type,\r\n      theme: 'toasta-theme-' + theme,\r\n      onAdd: toastaOptions.onAdd && isFunction(toastaOptions.onAdd) ? toastaOptions.onAdd : null,\r\n      onRemove: toastaOptions.onRemove && isFunction(toastaOptions.onRemove) ? toastaOptions.onRemove : null\r\n    };\r\n\r\n    // If there's a timeout individually or globally, set the toast to timeout\r\n    // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\r\n    toast.timeout = toastaOptions.hasOwnProperty('timeout') ? toastaOptions.timeout : this.config.timeout;\r\n\r\n    // Push up a new toast item\r\n    // this.toastsSubscriber.next(toast);\r\n    // this.toastsEmitter.next(toast);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.ADD, toast));\r\n    // If we have a onAdd function, call it here\r\n    if (toastaOptions.onAdd && isFunction(toastaOptions.onAdd)) {\r\n      toastaOptions.onAdd.call(this, toast);\r\n    }\r\n  }\r\n\r\n  // Clear all toasts\r\n  clearAll() {\r\n    // this.clearEmitter.next(null);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR_ALL));\r\n  }\r\n\r\n  // Clear the specific one\r\n  clear(id: number) {\r\n    // this.clearEmitter.next(id);\r\n    this.emitEvent(new ToastaEvent(ToastaEventType.CLEAR, id));\r\n  }\r\n\r\n  // Checks whether the local option is set, if not,\r\n  // checks the global config\r\n  private _checkConfigItem(config: any, options: any, property: string) {\r\n    if (options[property] === false) {\r\n      return false;\r\n    } else if (!options[property]) {\r\n      return config[property];\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  private emitEvent(event: ToastaEvent) {\r\n    if (this.eventSource) {\r\n      // Push up a new event\r\n      this.eventSource.next(event);\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { isFunction } from './toasta.utils';\r\nimport { ToastaService, ToastData, ToastaConfig, ToastaEvent, ToastaEventType } from './toasta.service';\r\n\r\n/**\r\n * Toasta is container for Toast components\r\n */\r\n@Component({\r\n  selector: 'ngx-toasta',\r\n  template: `\r\n    <div id=\"toasta\" [ngClass]=\"[position]\">\r\n        <ngx-toast *ngFor=\"let toast of toasts\" [toast]=\"toast\" (closeToast)=\"closeToast(toast)\"></ngx-toast>\r\n    </div>`\r\n})\r\nexport class ToastaComponent implements OnInit {\r\n  /**\r\n   * Set of constants defines position of Toasta on the page.\r\n   */\r\n  static POSITIONS: Array<String> = ['bottom-right', 'bottom-left', 'bottom-center', 'bottom-fullwidth', 'top-right', 'top-left', 'top-center', 'top-fullwidth', 'center-center'];\r\n\r\n  private _position: string = '';\r\n  // The window position where the toast pops up. Possible values:\r\n  // - bottom-right (default value from ToastConfig)\r\n  // - bottom-left\r\n  // - bottom-center\r\n  // - bottom-fullwidth\r\n  // - top-right\r\n  // - top-left\r\n  // - top-center\r\n  // - top-fullwidth\r\n  // - center-center\r\n  @Input()\r\n  set position(value: string) {\r\n    if (value) {\r\n      let notFound = true;\r\n      for (let i = 0; i < ToastaComponent.POSITIONS.length; i++) {\r\n        if (ToastaComponent.POSITIONS[i] === value) {\r\n          notFound = false;\r\n          break;\r\n        }\r\n      }\r\n      if (notFound) {\r\n        // Position was wrong - clear it here to use the one from config.\r\n        value = this.config.position;\r\n      }\r\n    } else {\r\n      value = this.config.position;\r\n    }\r\n    this._position = 'toasta-position-' + value;\r\n  }\r\n\r\n  get position(): string {\r\n    return this._position;\r\n  }\r\n\r\n  // The storage for toasts.\r\n  toasts: Array<ToastData> = [];\r\n\r\n  constructor(private config: ToastaConfig, private toastaService: ToastaService) {\r\n    // Initialise position\r\n    this.position = '';\r\n  }\r\n\r\n  /**\r\n   * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\r\n   * first time, and before any of its children have been checked. It is invoked only once when the\r\n   * directive is instantiated.\r\n   */\r\n  ngOnInit(): any {\r\n    // We listen events from our service\r\n    this.toastaService.events.subscribe((event: ToastaEvent) => {\r\n      if (event.type === ToastaEventType.ADD) {\r\n        // Add the new one\r\n        let toast: ToastData = event.value;\r\n        this.add(toast);\r\n      } else if (event.type === ToastaEventType.CLEAR) {\r\n        // Clear the one by number\r\n        let id: number = event.value;\r\n        this.clear(id);\r\n      } else if (event.type === ToastaEventType.CLEAR_ALL) {\r\n        // Lets clear all toasts\r\n        this.clearAll();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Event listener of 'closeToast' event comes from ToastaComponent.\r\n   * This method removes ToastComponent assosiated with this Toast.\r\n   */\r\n  closeToast(toast: ToastData) {\r\n    this.clear(toast.id);\r\n  }\r\n\r\n  /**\r\n   * Add new Toast\r\n   */\r\n  add(toast: ToastData) {\r\n    // If we've gone over our limit, remove the earliest\r\n    // one from the array\r\n    if (this.config.limit && this.toasts.length >= this.config.limit) {\r\n      this.toasts.shift();\r\n    }\r\n    // Add toasta to array\r\n    this.toasts.push(toast);\r\n    //\r\n    // If there's a timeout individually or globally,\r\n    // set the toast to timeout\r\n    if (+toast.timeout) {\r\n      this._setTimeout(toast);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear individual toast by id\r\n   * @param id is unique identifier of Toast\r\n   */\r\n  clear(id: number) {\r\n    if (id) {\r\n      this.toasts.forEach((value: any, key: number) => {\r\n        if (value.id === id) {\r\n          if (value.onRemove && isFunction(value.onRemove)) {\r\n            value.onRemove.call(this, value);\r\n          }\r\n          this.toasts.splice(key, 1);\r\n        }\r\n      });\r\n    } else {\r\n      throw new Error('Please provide id of Toast to close');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all toasts\r\n   */\r\n  clearAll() {\r\n    this.toasts.forEach((value: any, key: number) => {\r\n      if (value.onRemove && isFunction(value.onRemove)) {\r\n        value.onRemove.call(this, value);\r\n      }\r\n    });\r\n    this.toasts = [];\r\n  }\r\n\r\n  /**\r\n   * Custom setTimeout function for specific setTimeouts on individual toasts.\r\n   */\r\n  private _setTimeout(toast: ToastData) {\r\n    window.setTimeout(() => {\r\n      this.clear(toast.id);\r\n    }, toast.timeout);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { ToastData } from './toasta.service';\r\n\r\n/**\r\n * A Toast component shows message with title and close button.\r\n */\r\n@Component({\r\n  selector: 'ngx-toast',\r\n  template: `\r\n        <div class=\"toast\" [ngClass]=\"[toast.type, toast.theme]\">\r\n            <div *ngIf=\"toast.showClose\" class=\"close-button\" (click)=\"close($event)\"></div>\r\n            <div *ngIf=\"toast.title || toast.msg\" class=\"toast-text\">\r\n                <span *ngIf=\"toast.title\" class=\"toast-title\" [innerHTML]=\"toast.title | safeHtml\"></span>\r\n                <br *ngIf=\"toast.title && toast.msg\" />\r\n                <span *ngIf=\"toast.msg\" class=\"toast-msg\" [innerHtml]=\"toast.msg | safeHtml\"></span>\r\n            </div>\r\n        </div>`\r\n})\r\nexport class ToastComponent {\r\n\r\n  @Input() toast: ToastData;\r\n  @Output('closeToast') closeToastEvent = new EventEmitter();\r\n\r\n  /**\r\n   * Event handler invokes when user clicks on close button.\r\n   * This method emit new event into ToastaContainer to close it.\r\n   */\r\n  close($event: any) {\r\n    $event.preventDefault();\r\n    this.closeToastEvent.next(this.toast);\r\n  }\r\n}\r\n","import { DomSanitizer } from '@angular/platform-browser';\r\nimport { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n  constructor(private domSanitized: DomSanitizer) { }\r\n\r\n  transform(value: any, ...args: any[]): any {\r\n    return this.domSanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { ToastaComponent } from './toasta.component';\r\nimport { ToastComponent } from './toast.component';\r\nimport { SafeHtmlPipe } from './shared';\r\nimport { ToastaService, ToastaConfig, toastaServiceFactory } from './toasta.service';\r\n\r\nexport let providers = [\r\n  ToastaConfig,\r\n  { provide: ToastaService, useFactory: toastaServiceFactory, deps: [ToastaConfig] }\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastComponent, ToastaComponent, SafeHtmlPipe],\r\n  exports: [ToastComponent, ToastaComponent],\r\n  providers: providers\r\n})\r\nexport class ToastaModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ToastaModule,\r\n      providers: providers\r\n    };\r\n  }\r\n}\r\n"],"names":["Injectable","Subject","Component","Input","EventEmitter","Output","Pipe","DomSanitizer","NgModule","CommonModule"],"mappings":"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"}
